# Test code for the ND modules
# Copyright: (c) 2022, Akini Ross (@akinross) <akinross@cisco.com>

# GNU General Public License v3.0+ (see LICENSE or https://www.gnu.org/licenses/gpl-3.0.txt)

- name: Test that we have an Nexus Dashboard host, username and password
  fail:
    msg: 'Please define the following variables: nd_hostname, nd_username and nd_password.'
  when: nd_hostname is not defined or nd_username is not defined or nd_password is not defined

- name: Set vars
  set_fact:
    nd_info: &nd_info
      host: '{{ nd_hostname }}'
      username: '{{ nd_username }}'
      password: '{{ nd_password }}'
      validate_certs: '{{ nd_validate_certs | default(false) }}'
      use_ssl: '{{ nd_use_ssl | default(true) }}'
      use_proxy: '{{ nd_use_proxy | default(true) }}'
      output_level: '{{ nd_output_level | default("info") }}'
    ndi_info: &ndi_info
      insights_group: d2o-tme
    ndi_base: &ndi_base
      name: ansible-test-1
      sites:
        - qa-fabric
      baseline_site: qa-fabric
      enabled: false

# CLEAN ENVIRONMENT
- name: Query compliance requirements
  cisco.nd.nd_compliance_requirement_config_snapshot:
    <<: *nd_info
    <<: *ndi_info
    state: query
  register: clean_existing

- name: Delete existing communication compliance requirements
  cisco.nd.nd_compliance_requirement_config_snapshot:
    <<: *nd_info
    <<: *ndi_info
    name: "{{ item.name }}"
    state: absent
  loop: "{{ clean_existing.current }}"

- name: Query compliance requirements
  cisco.nd.nd_compliance_requirement_config_snapshot:
    <<: *nd_info
    <<: *ndi_info
    state: query
  register: query_existing

- name: Verify no compliance requirements are present
  assert:
    that:
    - query_existing.current == []

# PASS TESTS CREATE

- name: Create a compliance requirement ( check mode )
  cisco.nd.nd_compliance_requirement_config_snapshot: &requirement_create
    <<: *nd_info
    <<: *ndi_info
    <<: *ndi_base
    state: present
  check_mode: yes
  register: cm_create_requirement

- name: Create a compliance requirement
  cisco.nd.nd_compliance_requirement_config_snapshot:
    <<: *requirement_create
    state: present
  register: nm_create_requirement

- name: Create a compliance requirement again
  cisco.nd.nd_compliance_requirement_config_snapshot:
    <<: *requirement_create
    state: present
  register: nm_create_requirement_again

- name: Create a compliance requirement again with change
  cisco.nd.nd_compliance_requirement_config_snapshot:
    <<: *requirement_create
    enabled: true
    state: present
  register: nm_create_requirement_again_with_change

- name: Delete a compliance requirement ( check mode )
  cisco.nd.nd_compliance_requirement_config_snapshot:
    <<: *requirement_create
    state: absent
  check_mode: yes
  register: cm_remove_requirement

- name: Delete a compliance requirement
  cisco.nd.nd_compliance_requirement_config_snapshot:
    <<: *requirement_create
    state: absent
  register: nm_remove_requirement

- name: Verify create compliance requirement
  assert:
    that:
      - cm_create_requirement.current.associatedSites | length == 1
      - cm_create_requirement.current.baseEpochId is defined
      - cm_create_requirement.current.configurationType == "SNAPSHOT_BASED_CONFIGURATION_COMPLIANCE"
      - cm_create_requirement.current.enabled == false
      - cm_create_requirement.current.name == "ansible-test-1"
      - cm_create_requirement.current.requirementType == "CONFIGURATION_COMPLIANCE"
      - nm_create_requirement.current.associatedSites | length == 1
      - nm_create_requirement.current.baseEpochId is defined
      - nm_create_requirement.current.configurationType == "SNAPSHOT_BASED_CONFIGURATION_COMPLIANCE"
      - nm_create_requirement.current.enabled == false
      - nm_create_requirement.current.name == "ansible-test-1"
      - nm_create_requirement.current.requirementType == "CONFIGURATION_COMPLIANCE"
      - nm_create_requirement_again is not changed
      - nm_create_requirement_again_with_change.current.enabled == true
      - cm_remove_requirement.current == {}
      - nm_remove_requirement.current == {}

- name: Get Epoch with period ( latest )
  cisco.nd.nd_epoch:  
    <<: *nd_info
    <<: *ndi_info
    period: latest
    site: qa-fabric
  register: period_latest

- name: Create a compliance requirement with epoch id set
  cisco.nd.nd_compliance_requirement_config_snapshot:
    <<: *requirement_create
    epoch_id: "{{ period_latest.current.epochId }}"
    state: present
  register: nm_create_requirement_epoch_id

- name: Delete a compliance requirement
  cisco.nd.nd_compliance_requirement_config_snapshot:
    <<: *requirement_create
    state: absent
  register: nm_remove_requirement_epoch_id

- name: Verify create compliance requirement
  assert:
    that:
      - nm_remove_requirement_epoch_id.current == {}
      - nm_create_requirement_epoch_id.current.baseEpochId == "{{ period_latest.current.epochId }}"

- name: Create a compliance requirement ( without description )
  cisco.nd.nd_compliance_requirement_config_snapshot: &requirement_description
    <<: *nd_info
    <<: *ndi_info
    <<: *ndi_base
    state: present

- name: Query compliance requirements ( without description )
  cisco.nd.nd_compliance_requirement_config_snapshot:
    <<: *requirement_description
    state: query
  register: create_requirement_description_none

- name: Create a compliance requirement ( with description )
  cisco.nd.nd_compliance_requirement_config_snapshot:
    <<: *requirement_description
    description: ansible-test-description
    state: present

- name: Query compliance requirements ( with description )
  cisco.nd.nd_compliance_requirement_config_snapshot:
    <<: *requirement_description
    state: query
  register: create_requirement_description

- name: Create a compliance requirement ( without description )
  cisco.nd.nd_compliance_requirement_config_snapshot:
    <<: *requirement_description
    state: present

- name: Query compliance requirements ( without description )
  cisco.nd.nd_compliance_requirement_config_snapshot:
    <<: *requirement_description
    state: query
  register: create_requirement_description_none_again

- name: Delete a compliance requirement
  cisco.nd.nd_compliance_requirement_config_snapshot:
    <<: *requirement_description
    state: absent
  register: remove_requirement_description

- name: Verify create compliance requirement ( descriptions )
  assert:
    that:
      - create_requirement_description_none.current.description is not defined
      - create_requirement_description.current.description == "ansible-test-description"
      - create_requirement_description_none_again.current.description == " "
      - remove_requirement_description.current == {}

# FAIL TESTS

- name: Create a compliance requirement with invalid epoch id set
  cisco.nd.nd_compliance_requirement_config_snapshot:
    <<: *requirement_create
    epoch_id: "invalid"
    state: present
  ignore_errors: yes
  register: err_create_requirement_epoch_id_invalid

- name: Verify invaliud epoch id
  assert:
    that:
      - err_create_requirement_epoch_id_invalid.payload.messages.0.message == "The epoch with id invalid is not valid."
